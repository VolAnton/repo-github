Может кому поможет с GitHub, как я его понимаю.
Когда вводишь камит, то это можно сравнить с очередной "точкой восстановления системы", а название камита просто краткое описание, что  поменялось.
Если перейти на ветку через (git checkout master) (или вместо master другие ветки dev, lesson_1, и т.д.), то содержимое ветки  появляется в корневой папке (когда ветка активна мы видим её содержимое в корневой папке, и только содержимое этой ветки, другие ветки мы не видим, пока она не активка, активируем ветку - только тогда видим ее содержимое), и можем удалять, копировать, менять как хотим. Самое главное что ничего то и не удаляется, через команду (git revert [хэш]) мы можем создать новый камит (восстановить, вернуть из любого места, как "с точки восстановления"), который будет отменять прошлые действия (если удалили - то восстановить удаленные файлы и т.д.).
После любых изменений надо добавить их в репозиторий (на самом деле мы добавляем всё в индекс git) через команду (git add .) , далее через камит назвать кратко наши действия (git commit -m 'поменяли то-то') - и очередная "копия" готова.
Про Д.З. Я так понимаю создаем в корневом каталоге папку, кидаем туда Д.З. Далее создаем новую ветку (git branch lesson_1) с названием очередного урока (например, lesson_1) переходим на эту ветку (git checkout lesson_1) и далее добавляем изменения в репозиторий (git add .), (git commit -m 'Домашнее задание 1'). Потом надо синхронизировать с сервером GitHub, через (git push -u origin lesson_1) - так как там ветки lesson_1 не будет. Зайти на сайт GitHab и сделать "pull request". Кинуть ссылку преподавателю.

git version // просмотр текущей версии GitHub

git config --list // список конфигураций

git config --global user.name "[name]"

git config --global user.email "[@tut.by]"

git config --global color.ui auto

git config --global core.editor "[programm]"

git status // текущее состояние репозитория, какие файлы были добавлены, изменены или удалены

git init // инициализация Git

git branch // просмотр веток

git branch dev // создание ветки dev

git branch dev-master master // создание новой ветки, но она будет создана от ветки master, т.е. создание ветки которая взяла за основу ветку master. здесь master - это точка старта

git checkout dev  // переключиться на ветку dev

git checkout -b dev-test // создание новой ветки в момент переключения, т.е. создаст ветку dev-test если таковой нет в момент переключения

touch dev-branch.md // создание файла

git add dev-branch.md  //  добавление файла в индекс Git

git add .  // добавление всего в индекс (что находится в корневом каталоге)

git commit // редактор vi, здесь пишем сообщения и они прикрепляются к камиту. Для написания сообщения нажать i, после ввода нажать esc. Выход из него :wq - w - запись изменений, q - выход.

git commit -m 'added dev-branch' // комит о добавлении dev-branch

git commit -a // это тоже самое, что и git add и затем git commit

git commit -am 'vvv' // это тоже самое, что и git add и затем git commit и добавление сообщения vvv в камит, т.е. добавили файл, и внесли камит

git reset xxxxxx // отмена камита, где хххххх - это хэш камита

git revert xxxxxx  // создает новый камит, которые отменяет действия предыдущего (удаляет), где хххххх - это хэш камита

git reflog // история изменения всего и не только камитов (просмотр всех камитов, даже удалённых), но и всех операций: отмена камитов, переход по истории создание новых объектов

git restore file // сбросить состояние файла, с которым работаете на состояние последнего камита, где file - название файла

git log // история изменений камитов 

q // выйти из лога

ls // просмотр файлов

ls -a // просмотр всех файлов, даже скрытых

git log --oneline // история в краткой записи

clear // очистка экрана

echo "edited" > readme.md // добавление слова edited  в файл readme.md

cat .gitignore 	// просмотре содержимого файла

.gitkeep // позволяет выдеть пустые папки, если создать такой файл в этой папке: images/ или storage/

.gitignore // указывается что игнорировать и не вносить в репозиторий GitHub: .env или temp/* или cache/*

rm // удаление файлов

rm -R // удаление папок и всех вложений внутри

ssh-keygen // генерируем SSH ключ

ssh-keygen -t rsa // так получилось изменить ключ ssh, и он совпал с сервером

git clone [здесь адресс ssh с GitHub] [название папки] // клон репозитория с GitHub

git push // отправка репозитория на сервепр GitHub

git push -u origin dev // создание ветки dev на сервере origin, так как её там не было

git fetch // подгрузить ветку из "удалённого" репозитория (сервера)

git merge dev // слияние веток, объединение различных веток в общее состояние main, тут dev будет вливаться в main

git push --delete origin dev // удалить ветки на сервере GitHub, уделение ветки dev в origin (это "уделённый" сервер)

git rabase // перенос ветки, смена старта ветки, сдвиг старта ветки

git push --force // принудительная запись, принудительно перезаписывает удалённую ветку на текущую, так как после rebase начало ветки будет смещено, а на сервере её начало осталось прежним






При создании репозитория в GitHub пишет подсказки
…or create a new repository on the command line

echo "# repo-github" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:VolAnton/repo-github.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin git@github.com:VolAnton/repo-github.git
git branch -M main
git push -u origin main

…or import code from another repository

You can initialize this repository with code from a Subversion, Mercurial, or TFS project.
